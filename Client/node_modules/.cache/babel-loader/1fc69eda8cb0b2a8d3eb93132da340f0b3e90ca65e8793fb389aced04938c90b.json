{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\New folder\\\\HackGt11Project\\\\VisualEase\\\\chapter-visualizer-frontend\\\\src\\\\Pages\\\\ScrTextChunker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px 20px;\n  background-color: #f4f4f4;\n  min-height: 100vh;\n  box-sizing: border-box;\n`;\n_c = Container;\nconst ContentWrapper = styled.div`\n  width: 100%;\n  max-width: 1200px;\n  padding: 20px;\n  background-color: #fff;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n`;\n_c2 = ContentWrapper;\nconst Section = styled.section`\n  margin-bottom: 40px;\n`;\n_c3 = Section;\nconst SectionTitle = styled.h2`\n  margin-bottom: 20px;\n  color: #333;\n  font-size: 24px;\n`;\n_c4 = SectionTitle;\nconst TextInput = styled.textarea`\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  width: 100%;\n  max-width: 100%;\n  min-height: 100px;\n`;\n_c5 = TextInput;\nconst LevelInput = styled.input`\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  width: 100%;\n  max-width: 100%;\n  margin-top: 20px;\n`;\n_c6 = LevelInput;\nconst TermsTable = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 2fr;  // Two columns, one for terms and one for definitions\n  gap: 15px;\n  background-color: #f9f9f9;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 15px;\n`;\n_c7 = TermsTable;\nconst TableHeader = styled.div`\n  font-weight: bold;\n  text-align: left;\n`;\n_c8 = TableHeader;\nconst TermItem = styled.div`\n  padding: 10px;\n  border-bottom: 1px solid #e9e9e9;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n_c9 = TermItem;\nconst TermText = styled.span`\n  color: #333;\n  font-weight: bold;\n`;\n_c10 = TermText;\nconst DefinitionText = styled.span`\n  color: #333;\n`;\n_c11 = DefinitionText;\nconst Button = styled.button`\n  margin-top: 20px;\n  padding: 15px 25px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  font-size: 18px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n_c12 = Button;\nconst ExportButton = styled(Button)`\n  background-color: #28a745;\n\n  &:hover {\n    background-color: #218838;\n  }\n`;\n_c13 = ExportButton;\nconst ScrTextChunker = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [studyLevel, setStudyLevel] = useState('Beginner'); // State for study level\n  const [terms, setTerms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleGenerateTerms = async () => {\n    setLoading(true);\n    console.log(\"Input text:\", text);\n    console.log(\"Study level:\", studyLevel); // Log the study level\n\n    try {\n      const response = await fetch('http://localhost:5001/extract_terms', {\n        // Directly call Flask backend\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text,\n          level: studyLevel\n        })\n      });\n      console.log(\"Request body:\", {\n        text,\n        level: studyLevel\n      });\n      const data = await response.json();\n      console.log(\"Response data:\", data);\n\n      // Parse the returned string into individual terms and definitions\n      const parsedTerms = data.terms_and_definitions.split(/\\n\\d+\\.\\s/) // Split based on the numbered list pattern\n      .filter(entry => entry.trim() !== '') // Remove empty entries\n      .map(entry => {\n        const match = entry.match(/^\\*\\*(.*?)\\*\\*:\\s(.*)$/);\n        if (match) {\n          return {\n            termName: match[1].trim(),\n            definition: match[2].trim()\n          };\n        } else {\n          return null;\n        }\n      }).filter(item => item !== null);\n      if (parsedTerms.length === 0) {\n        console.warn(\"No terms were parsed.\");\n        alert(\"No terms could be extracted. Please check the input and try again.\");\n      }\n      setTerms(parsedTerms);\n    } catch (error) {\n      console.error(\"Error generating terms:\", error);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        children: [/*#__PURE__*/_jsxDEV(SectionTitle, {\n          children: \"Input Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          value: text,\n          onChange: e => setText(e.target.value),\n          placeholder: \"Enter or paste your text here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SectionTitle, {\n          children: \"Study Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), \"  \", /*#__PURE__*/_jsxDEV(LevelInput, {\n          type: \"text\",\n          value: studyLevel,\n          onChange: e => setStudyLevel(e.target.value),\n          placeholder: \"Enter study level (e.g., undergraduate, graduate, expert)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleGenerateTerms,\n          disabled: loading || !text || !studyLevel,\n          children: loading ? \"Generating...\" : \"Generate Terms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        children: [/*#__PURE__*/_jsxDEV(SectionTitle, {\n          children: \"Generated Terms & Definitions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TermsTable, {\n          children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n            children: \"Term\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableHeader, {\n            children: \"Definition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), terms.map((term, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TermItem, {\n              children: /*#__PURE__*/_jsxDEV(TermText, {\n                children: term.termName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TermItem, {\n              children: /*#__PURE__*/_jsxDEV(DefinitionText, {\n                children: term.definition\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Generate Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExportButton, {\n        children: \"Export File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrTextChunker, \"mWPpMLnfyDOFMY2xNfMTHQDOrJw=\");\n_c14 = ScrTextChunker;\nexport default ScrTextChunker;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ContentWrapper\");\n$RefreshReg$(_c3, \"Section\");\n$RefreshReg$(_c4, \"SectionTitle\");\n$RefreshReg$(_c5, \"TextInput\");\n$RefreshReg$(_c6, \"LevelInput\");\n$RefreshReg$(_c7, \"TermsTable\");\n$RefreshReg$(_c8, \"TableHeader\");\n$RefreshReg$(_c9, \"TermItem\");\n$RefreshReg$(_c10, \"TermText\");\n$RefreshReg$(_c11, \"DefinitionText\");\n$RefreshReg$(_c12, \"Button\");\n$RefreshReg$(_c13, \"ExportButton\");\n$RefreshReg$(_c14, \"ScrTextChunker\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","Container","div","_c","ContentWrapper","_c2","Section","section","_c3","SectionTitle","h2","_c4","TextInput","textarea","_c5","LevelInput","input","_c6","TermsTable","_c7","TableHeader","_c8","TermItem","_c9","TermText","span","_c10","DefinitionText","_c11","Button","button","_c12","ExportButton","_c13","ScrTextChunker","_s","text","setText","studyLevel","setStudyLevel","terms","setTerms","loading","setLoading","handleGenerateTerms","console","log","response","fetch","method","headers","body","JSON","stringify","level","data","json","parsedTerms","terms_and_definitions","split","filter","entry","trim","map","match","termName","definition","item","length","warn","alert","error","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","type","onClick","disabled","term","index","Fragment","_c14","$RefreshReg$"],"sources":["C:/Users/User/Documents/New folder/HackGt11Project/VisualEase/chapter-visualizer-frontend/src/Pages/ScrTextChunker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 40px 20px;\r\n  background-color: #f4f4f4;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst Section = styled.section`\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst SectionTitle = styled.h2`\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst TextInput = styled.textarea`\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  min-height: 100px;\r\n`;\r\n\r\nconst LevelInput = styled.input`\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst TermsTable = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;  // Two columns, one for terms and one for definitions\r\n  gap: 15px;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  padding: 15px;\r\n`;\r\n\r\nconst TableHeader = styled.div`\r\n  font-weight: bold;\r\n  text-align: left;\r\n`;\r\n\r\nconst TermItem = styled.div`\r\n  padding: 10px;\r\n  border-bottom: 1px solid #e9e9e9;\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst TermText = styled.span`\r\n  color: #333;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst DefinitionText = styled.span`\r\n  color: #333;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-top: 20px;\r\n  padding: 15px 25px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n\r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n`;\r\n\r\nconst ExportButton = styled(Button)`\r\n  background-color: #28a745;\r\n\r\n  &:hover {\r\n    background-color: #218838;\r\n  }\r\n`;\r\n\r\nconst ScrTextChunker = () => {\r\n  const [text, setText] = useState('');\r\n  const [studyLevel, setStudyLevel] = useState('Beginner');  // State for study level\r\n  const [terms, setTerms] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleGenerateTerms = async () => {\r\n    setLoading(true);\r\n\r\n    console.log(\"Input text:\", text);\r\n    console.log(\"Study level:\", studyLevel);  // Log the study level\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5001/extract_terms', {  // Directly call Flask backend\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ text, level: studyLevel })\r\n      });\r\n\r\n      console.log(\"Request body:\", { text, level: studyLevel });\r\n\r\n      const data = await response.json();\r\n\r\n      console.log(\"Response data:\", data);\r\n\r\n      // Parse the returned string into individual terms and definitions\r\n      const parsedTerms = data.terms_and_definitions\r\n        .split(/\\n\\d+\\.\\s/)  // Split based on the numbered list pattern\r\n        .filter(entry => entry.trim() !== '')  // Remove empty entries\r\n        .map(entry => {\r\n          const match = entry.match(/^\\*\\*(.*?)\\*\\*:\\s(.*)$/);\r\n          if (match) {\r\n            return { termName: match[1].trim(), definition: match[2].trim() };\r\n          } else {\r\n            return null;\r\n          }\r\n        })\r\n        .filter(item => item !== null);\r\n\r\n      if (parsedTerms.length === 0) {\r\n        console.warn(\"No terms were parsed.\");\r\n        alert(\"No terms could be extracted. Please check the input and try again.\");\r\n      }\r\n\r\n      setTerms(parsedTerms);\r\n    } catch (error) {\r\n      console.error(\"Error generating terms:\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ContentWrapper>\r\n        <Section>\r\n          <SectionTitle>Input Text</SectionTitle>\r\n          <TextInput\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Enter or paste your text here...\"\r\n          />\r\n\r\n          <SectionTitle>Study Level</SectionTitle>  {/* Add a title for the study level input */}\r\n          <LevelInput\r\n            type=\"text\"\r\n            value={studyLevel}\r\n            onChange={(e) => setStudyLevel(e.target.value)}\r\n            placeholder=\"Enter study level (e.g., undergraduate, graduate, expert)\"\r\n          />\r\n          \r\n          <Button onClick={handleGenerateTerms} disabled={loading || !text || !studyLevel}>\r\n            {loading ? \"Generating...\" : \"Generate Terms\"}\r\n          </Button>\r\n        </Section>\r\n\r\n        <Section>\r\n          <SectionTitle>Generated Terms & Definitions</SectionTitle>\r\n          <TermsTable>\r\n            <TableHeader>Term</TableHeader>\r\n            <TableHeader>Definition</TableHeader>\r\n            {terms.map((term, index) => (\r\n              <React.Fragment key={index}>\r\n                <TermItem>\r\n                  <TermText>{term.termName}</TermText>\r\n                </TermItem>\r\n                <TermItem>\r\n                  <DefinitionText>{term.definition}</DefinitionText>\r\n                </TermItem>\r\n              </React.Fragment>\r\n            ))}\r\n          </TermsTable>\r\n        </Section>\r\n\r\n        <Button>Generate Images</Button>\r\n        <ExportButton>Export File</ExportButton>\r\n      </ContentWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ScrTextChunker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}